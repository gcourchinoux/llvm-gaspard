//===- TestSubtarget.h - Define Subtarget for the Test ------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the Test specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_Test_TestSUBTARGET_H
#define LLVM_LIB_TARGET_Test_TestSUBTARGET_H

#include "TestFrameLowering.h"
#include "TestISelLowering.h"
#include "TestInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "TestGenSubtargetInfo.inc"

namespace llvm {

class StringRef;
class TargetMachine;

class TestSubtarget : public TestGenSubtargetInfo {
  virtual void anchor();
  TestInstrInfo InstrInfo;
  TestFrameLowering FrameLowering;
  TestTargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  TestSubtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
               const TargetMachine &TM);

  /// Parses features string setting specified subtarget options.
  /// Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  const TestInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const TestFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const TestTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const TestRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
};

} // end namespace llvm

#endif // LLVM_LIB_TARGET_Test_TestSUBTARGET_H
